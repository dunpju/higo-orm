package %PACKAGE%

import (
%IMPORT%
)

type %MODEL_PACKAGE%Dao struct {
    *arm.BaseDao
    model *%MODEL_PACKAGE%.Model
}

func New%MODEL_PACKAGE%Dao() *%MODEL_PACKAGE%Dao {
    dao := &%MODEL_PACKAGE%Dao{model: %MODEL_PACKAGE%.New()}
    dao.BaseDao = arm.NewBaseDao(dao)
    return dao
}

func (this *%MODEL_PACKAGE%Dao) SetModel(model arm.IModel) {
    this.model = model.(*%MODEL_PACKAGE%.Model)
}

func (this *%MODEL_PACKAGE%Dao) GetModel() arm.IModel {
    return this.model
}

func (this *%MODEL_PACKAGE%Dao) Model() *%MODEL_PACKAGE%.Model {
    return %MODEL_PACKAGE%.New()
}

func (this *%MODEL_PACKAGE%Dao) Models() []*%MODEL_PACKAGE%.Model {
    return make([]*%MODEL_PACKAGE%.Model, 0)
}

func (this *%MODEL_PACKAGE%Dao) TX(tx *gorm.DB) *%MODEL_PACKAGE%Dao {
    this.model.TX(tx)
    return this
}

func (this *%MODEL_PACKAGE%Dao) SetData(entity *%MODEL_PACKAGE%Entity.Entity) arm.IDao {
    return this.model.Builder(this, func() {
        if !entity.PrimaryEmpty() || entity.IsEdit() { //编辑
            if !this.GetBy%UPPER_PRIMARY_KEY%(entity.%UPPER_PRIMARY_KEY%).Exist() {
                DaoException.Throw("不存在", 0)
            }
            this.model.Where(%MODEL_PACKAGE%.%UPPER_PRIMARY_KEY%, "=", entity.%UPPER_PRIMARY_KEY%)
            if entity.Equals(%MODEL_PACKAGE%Entity.FlagDelete) {
                // todo::填充修改字段
            } else if entity.Equals(%MODEL_PACKAGE%Entity.FlagUpdate) {
                // todo::填充修改字段
            }%ROW_UPDATE_TIME%
        } else { //新增
%MODEL_PROPERTY%
        }
    })
}

// Add 添加
func (this *%MODEL_PACKAGE%Dao) Add() (gormDB *gorm.DB, lastInsertId int64) {
    gormDB, lastInsertId = this.model.Insert().LastInsertId()
    this.CheckError(gormDB)
    return
}

// Update 更新
func (this *%MODEL_PACKAGE%Dao) Update() (*gorm.DB, int64) {
    gormDB, affected := this.model.Update().Exec()
    this.CheckError(gormDB)
    return gormDB, affected
}

// BatchInsert 批量插入
func (this *%MODEL_PACKAGE%Dao) BatchInsert(entityList []*%MODEL_PACKAGE%Entity.Entity, chunk int) (gormDB *gorm.DB, affected int64) {
	for start := 0; start < len(entityList); start += chunk {
		end := start + chunk
		if end > len(entityList) {
			end = len(entityList)
		}
		model := this.model.Insert().Columns(
			%INSERT_COLUMNS%
		)
		for _, entity := range entityList[start:end] {
			model.Values(
				%VALUES%
			)
		}

		gormDB, affected = model.Save()
		this.CheckError(gormDB)
	}
	return
}

// BatchUpdate 批量更新
func (this *%MODEL_PACKAGE%Dao) BatchUpdate(entityList []*%MODEL_PACKAGE%Entity.Entity, chunk int) (gormDB *gorm.DB, affected int64) {
    for start := 0; start < len(entityList); start += chunk {
		end := start + chunk
		if end > len(entityList) {
			end = len(entityList)
		}

		model := this.model.Update()
		idList := make([]int64, 0)

		%CASES%

		for _, entity := range entityList[start:end] {
			idList = append(idList, entity.%UPPER_PRIMARY_KEY%)
			%WHENS%
		}

		%CASE_WHEN%

		model.WhereIn(%MODEL_PACKAGE%.%UPPER_PRIMARY_KEY%, idList)
		gormDB, affected = model.Exec()
		this.CheckError(gormDB)
	}
	return
}

// GetBy%UPPER_PRIMARY_KEY% %PRIMARY_KEY%查询
func (this *%MODEL_PACKAGE%Dao) GetBy%UPPER_PRIMARY_KEY%(%PRIMARY_KEY% int64) *%MODEL_PACKAGE%.Model {
    model := this.Model()
    gormDB := this.model.Select().Where(%MODEL_PACKAGE%.%UPPER_PRIMARY_KEY%, "=", %PRIMARY_KEY%).First(&model)
    this.CheckError(gormDB)
    return model
}

// GetBy%UPPER_PRIMARY_KEY%s %PRIMARY_KEY%集查询
func (this *%MODEL_PACKAGE%Dao) GetBy%UPPER_PRIMARY_KEY%s(%PRIMARY_KEY%s []int64) []*%MODEL_PACKAGE%.Model {
    models := this.Models()
    gormDB := this.model.Select().WhereIn(%MODEL_PACKAGE%.%UPPER_PRIMARY_KEY%, %PRIMARY_KEY%s).Get(&models)
    this.CheckError(gormDB)
    return models
}

// DeleteBy%UPPER_PRIMARY_KEY% 硬删除
func (this *%MODEL_PACKAGE%Dao) DeleteBy%UPPER_PRIMARY_KEY%(%PRIMARY_KEY% int64) *gorm.DB {
    gormDB, _ := this.model.Delete().Where(%MODEL_PACKAGE%.%UPPER_PRIMARY_KEY%, "=", %PRIMARY_KEY%).Exec()
    this.CheckError(gormDB)
    return gormDB
}

// Paginate 列表
func (this *%MODEL_PACKAGE%Dao) Paginate(perPage, page uint64) him.IPaginate {
    models := this.Models()
    gormDB, paginate := this.model.Select().Paginate(page, perPage, &models)
    this.CheckError(gormDB)
    return paginate
}
